from distutils.core import setup
import glob
import os
import errno

# Certain information, available now, needs to be accessible from the running
# scripts after installation. We achieve this by means of a stub module
# generated here (suggestions welcome, but not so much as good patches). Shared
# data folder is one option, but distutils not so nice with
# finding/configuring that - in fact, SYSCONFDIR is one of our passed
# parameters, so finding dirs (such as shared data) is seemingly non-trivial.

# Create the module directory
config_directory = "${CMAKE_CURRENT_BINARY_DIR}/gosmart_sf_config"
try:
    os.makedirs(config_directory)
except OSError as e:
    if e.errno != errno.EEXIST:
        raise RuntimeError("Could not create directory: %s" % (str(e)))

# The init script will contain the necessary variables
config_target = os.path.join(config_directory, "__init__.py")

with open(config_target, "w") as f:
    f.write("""
fortran_modules_dir = '{0}'
git_revision = '{1}'
etc_location = '{2}'
""".format(
        "${CMAKE_Fortran_MODULE_DESTINATION}",
        "${GIT_REVISION}",
        "${ETC_FULL_LOCATION}"
    ))

# At the moment, we require pre-computed steady-state profiles for certain
# treatments. Obviously this isn't particularly configurable, so an alternative,
# ideally one that allows a pre-computed result from one simulation to be used
# as a parameter for another, would be preferable.
sars_prefix = '${CMAKE_CURRENT_SOURCE_DIR}' + '/src/gssf/'
sars = [d[len(sars_prefix):] for d in glob.glob(sars_prefix + 'data/power_profiles/sar-*.dat')]

# Standard configuration, including GSSF (launcher) and GSSA (server) modules,
# along with a whole lot of important package data. Standard fields should be
# loaded from configuration files ultimately
setup(name='Go-Smart Simulation',
      version='${PACKAGE_VERSION}',
      packages=['gssf', 'gssf', 'gosmart_sf_config'],
      package_dir={'gssf': '${CMAKE_CURRENT_SOURCE_DIR}/src/gssf', 'gosmart_sf_config': config_directory},

      package_data={'gssf': [
          'data/go-smart-probe-location-template.txt',
          'data/go-smart-power-over-time.txt',

          'data/constants/constants-lung.xml',
          'data/constants/constants-liver.xml',
          'data/constants/constants-kidney.xml',
          'data/constants/constants-default.xml',
          'data/constants/constants-variant-mwa.xml',
          'data/constants/constants-variant-mwa_nonlinear.xml',
          'data/constants/constants-variant-cryoablation.xml',
          'data/constants/constants-variant-ire.xml',
          'data/constants/constants-variant-rfa_point_sources.xml',
          'data/constants/constants-variant-rfa_point_sources_new_elmer.xml',
          'data/constants/constants-variant-rfa_joule_heating.xml',

          'data/templates/inner-basic-mwa.xml',
          'data/templates/inner-basic-mwa-coarse.xml',
          'data/templates/inner-microsulis-mwa.xml',
          'data/templates/inner-microsulis-mwa-coarse.xml',

          'data/templates/go-smart-axisymm_basic-mwa.geo',
          'data/templates/go-smart-axisymm_microsulis-mwa.geo',
          'data/templates/go-smart-axisymm_basic-mwa_needleless.geo',
          'data/templates/go-smart-axisymm_microsulis-mwa_needleless.geo',
          'data/templates/go-smart-template_ps.sif',
          'data/templates/go-smart-template_ps-modbioheat.sif',
          'data/templates/go-smart-template_ps-newelmer.sif',
          'data/templates/go-smart-template_jh.sif',
          'data/templates/go-smart-template_cryo.sif',
          'data/templates/go-smart-template_ire.sif',
          'data/templates/go-smart-template_mwa.sif',
          'data/templates/go-smart-template_mwa-nl.sif',

          'data/elmer_modules/mwa_RelPerm.f90',
          'data/elmer_modules/mwa_ElecCond.f90',
          'data/elmer_modules/mwa_PowerOverTime.f90',
      ] + sars},

      install_requires=['numpy', 'jinja2'],

      description='Wrapper for Go-Smart simulation environment',
      author='NUMA Engineering Services Ltd.',
      author_email='phil.weir@numa.ie',
      url='http://gosmart-project.eu/',

      scripts=[
          '${CMAKE_CURRENT_SOURCE_DIR}' + '/scripts/go-smart-launcher',
      ])
