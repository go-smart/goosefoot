#!/usr/bin/python3

# This file is part of the Go-Smart Simulation Architecture (GSSA).
# Go-Smart is an EU-FP7 project, funded by the European Commission.
#
# Copyright (C) 2013-  NUMA Engineering Ltd. (see AUTHORS file)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
import os
import traceback

from gssf import gssf
from gssf import utils
from gssf import errors


def main():
    # We outsource argument parsing to the utils module
    args = utils.parse_args()

    # Ensure we can dump error message to FS (allow for a persistent record)
    error_location = 'error_message'
    if args.global_working_directory:
        error_location = os.path.join(args.global_working_directory, error_location)
    try:
        os.remove(error_location)
    except OSError:
        pass

    # Create the application object and initialize it with what we know
    try:
        wrapper = gssf.GoSmartSimulationFramework(args=args, global_working_directory=args.global_working_directory, update_status=args.update_status)
    except Exception as e:
        # Return an error that fits with the GoSmartError classes
        if isinstance(e, errors.GoSmartError):
            code = e.code
        else:
            # If we haven't wrapped the error with GSE, there is certainly a problem in our side
            code = "E_SERVER"

        with open('error_message', 'w') as f:
            f.write("%s\nINIT-ERROR (%s): %s" % (code, type(e).__name__, str(e)))

        traceback.print_exc()
        return int(errors.Error[code].value)

    # Let the user know we have arrived
    wrapper.print_header()

    try:
        # Unless passed in the arguments, we run a single process
        wrapper.launch(default_procs=1)
    except Exception as e:
        # Catch any error and ensure GS error is thrown
        if isinstance(e, errors.GoSmartError):
            code = e.code
        else:
            # If we haven't wrapped the error with GSE, there is certainly a problem in our side
            code = "E_SERVER"

        with open('error_message', 'w') as f:
            f.write("%s\nEXEC-ERROR (%s): %s" % (code, type(e).__name__, str(e)))

        traceback.print_exc()
        return int(errors.Error[code].value)

    return 0


if __name__ == "__main__":
    sys.exit(main())
